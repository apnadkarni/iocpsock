# Commands covered:  socket2
#
# This file contains a collection of tests for one or more of the commands.
# Sourcing this file into Tcl runs the tests and generates output for errors.
#  No output means no errors were found.
#
# RCS: @(#) $Id$

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::test
}

::tcltest::loadTestedCommands
::tcltest::testConstraint xp \
	[expr {$::tcl_platform(os) == "Windows NT" && $::tcl_platform(osVersion) > 5.0}]

test socket2-1.1 {Tcl_WrongNumArgs message} -constraints {
    nt
} -body {
    socket2
} -returnCodes {
    1
} -result {wrong # args: should be either:
socket2 ?-protocol type? ?-myaddr addr? ?-myport myport? ?-async? host port
socket2 -server command ?-protocol type? ?-myaddr addr? port
socket2 -lookup host ?-protocol type? ?-command command?}

### The -ovrlpd option has now gone away.  Ensure it returns an error.
test socket2-1.2 {no more -ovrlpd option} -constraints {
    nt
} -body {
    set s [socket2 -server foobar -ovrlpd 10 0]
} -returnCodes {
    1
} -cleanup {
    catch {close $s}
} -result {bad option "-ovrlpd": must be -async, -myaddr, -myport, -server, -protocol, or -lookup}

### Check fconfigure options.
test socket2-1.3 {Check all fconfigure options} -constraints {
    nt
} -match glob -body {
    set s [socket2 -server foobar 0]
    set port [lindex [fconfigure $s -sockname] 2]
    fconfigure $s
} -cleanup {
    catch {close $s}
} -result {-blocking 1 -buffering full -buffersize 4096 -encoding cp1252 -eofchar {} -translation auto -peername {0.0.0.0 0.0.0.0 0} -sockname {*} -keepalive 0 -nagle 1 -backlog 5 -sendcap {20 0} -recvburst {20 0}}


### Accepts should not be greedy or we risk resource starvation
### for recv/send activities.  UNIX behaves this way, we should too.
test socket2-2.1 {accepts are sequential} -constraints {
    nt
} -setup {
    set connects 0
    set notices [list]
    proc accept {s a p} {
	global connects notices
	incr connects
	after 0 [subst {lappend notices {just serviced $connects}}]
	lappend notices "now servicing $connects"
	fconfigure $s -blocking 0
	close $s
    }
} -body {
    set server [socket2 -server accept 0]
    set port [lindex [fconfigure $server -sockname] 2]
    for {set i 0} {$i < 10} {incr i} {
	lappend clients [socket localhost $port]
    }
    update
    set notices
} -cleanup {
    close $server
    rename accept {}
    unset notices
    unset connects
} -result {{now servicing 1} {now servicing 2} {just serviced 1} {just serviced 2} {now servicing 3} {now servicing 4} {just serviced 3} {just serviced 4} {now servicing 5} {now servicing 6} {just serviced 5} {just serviced 6} {now servicing 7} {now servicing 8} {just serviced 7} {just serviced 8} {now servicing 9} {now servicing 10} {just serviced 9} {just serviced 10}}

test socket2-3.1 {IocpWatchProc validatation of socket state (readable)} -constraints {
    nt
} -setup {
    set notices [list]
    proc accept {s a p} {
	global cliFromServ notices
	lappend notices {got connect}
        set cliFromServ $s
	fconfigure $s -blocking 0
	fileevent $s readable [list GotRead $s]
    }
    proc GotRead {s} {
	global notices
	if {[string length [set e [fconfigure $s -error]]]} {
	    lappend notices "error: $s: $e : closing socket"
	    close $s
	    return
	}
	set stuff [read $s]
	set got [string length $stuff]
	if {$got} {lappend notices "($got): $stuff"}
	if {[eof $s]} {
	    lappend notices "closing"
	    close $s
	}
    }
} -body {
    set server [socket2 -server accept 0]
    set port [lindex [fconfigure $server -sockname] 2]
    set client [socket localhost $port]
    fconfigure $client -blocking 0 -buffering line
    puts $client "hello"
    update
    set old [fileevent $cliFromServ readable]

    # turn off readable notification.
    fileevent $cliFromServ readable {}
    # send data.
    puts $client "hello again?"
    # turn on readable notification.  IocpWatchProc
    # should validate and cause a readable notification.
    fileevent $cliFromServ readable $old

    update
    set notices
} -cleanup {
    close $client
    close $server
    unset server
    rename accept {}
    rename GotRead {}
    unset notices
    unset cliFromServ
} -result {{got connect} {(6): hello
} {(13): hello again?
}}

# cleanup
::tcltest::cleanupTests
return
